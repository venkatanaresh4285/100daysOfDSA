1.Linkedlist Introduction

#include<bits/stdc++.h>
using namespace std;
struct Node{
  int data;
  Node* next;
  Node(int data1,Node* next1){
    data=data1;
    next=next1;
  }
   Node(int data1){
    data=data1;
    next=nullptr;
  }
};
int main(){
  vector<int> arr={2,3,4,5,6};
  Node* y= new Node(arr[3]);
  cout<<y->data;
}



2.Convert Array to Linkedlist

#include<bits/stdc++.h>
using namespace std;
struct Node{
    int data;
    Node* next;
  Node(int data1){
    data=data1;
    next=nullptr;
  }
    
};
Node* ArraytoLL(vector<int> &arr){
  Node* head=new Node(arr[0]);  // 1 2 3 4 5 
  Node* mover=head;
  for(int i=1;i<arr.size();i++){
      Node* temp=new Node(arr[i]);  
      mover->next=temp;
    mover=temp;
  }
  return head;
}
int main(){
  vector<int> arr={1,2,3,4,5};
  Node* head=ArraytoLL(arr);
  cout<<head->data;
}


3)Traversing Linkedlist

#include<bits/stdc++.h>
using namespace std;
struct Node{
    int data;
    Node* next;
  Node(int data1){
    data=data1;
    next=nullptr;
  }
    
};
Node* ArraytoLL(vector<int> &arr){
  Node* head=new Node(arr[0]);  // 1 2 3 4 5 
  Node* mover=head;
  for(int i=1;i<arr.size();i++){
      Node* temp=new Node(arr[i]);  
      mover->next=temp;
    mover=temp;
  }
  return head;
}
int main(){
  vector<int> arr={1,2,3,4,5};
  Node* head=ArraytoLL(arr);
  Node* temp=head;
  while(temp!=nullptr){
    cout<<temp->data<<" ";
    temp=temp->next;
   
  }
}



4)Count Elements in Linkedlist

#include<bits/stdc++.h>
using namespace std;
struct Node{
    int data;
    Node* next;
  Node(int data1){
    data=data1;
    next=nullptr;
  }
    
};
Node* ArraytoLL(vector<int> &arr){
  Node* head=new Node(arr[0]);  // 1 2 3 4 5 
  Node* mover=head;
  for(int i=1;i<arr.size();i++){
      Node* temp=new Node(arr[i]);  
      mover->next=temp;
    mover=temp;
  }
  return head;
}

int COUNT(Node* head){
  Node* temp=head;
  int cnt=0;
  while(temp!=nullptr){
    temp=temp->next;
    cnt++;
  }
  return cnt;
}
int main(){
  vector<int> arr={1,2,3,4,5};
  Node* head=ArraytoLL(arr);
 cout<<COUNT(head);
}



5)Remove Head Of The LinkedList

#include<bits/stdc++.h>
using namespace std;
struct Node{
  int data;
  Node* next;
  Node(int data1){
    data=data1;
    next=nullptr;
  }
};
void print(Node* head){
  while(head!=NULL){
    cout<<head->data<<" ";
    head=head->next;
  }
}
Node* convert(vector<int> &arr){
  Node* head=new Node(arr[0]);
  Node* mover=head;
  for(int i=1;i<arr.size();i++){
    Node* temp=new Node(arr[i]); // 1 2 3 4 5 
    mover->next=temp;
    mover=temp;
  }
  return head;
}
Node* RemoveHead(Node* head){
  if(head==NULL){
    return head;
  }
  Node* temp=head;
  head=head->next;
  delete temp;
  return head;
}
int main(){
 vector<int> arr={1,2,3,4,5};
Node* head=convert(arr);
head=RemoveHead(head);
print(head);
}



REMOVE TAIL OF LINKEDLIST

#include<bits/stdc++.h>
using namespace std;
struct Node{
  int data;
  Node* next;
  Node(int data1,Node* next1){
    data=data1;
    next=next1;
  }
  Node(int data1){
    data=data1;
    next=nullptr;
  }
};
Node* ArraytoLL(vector<int> arr){
  Node* head =new Node(arr[0]);
  Node* mover=head;
  for(int i=1;i<arr.size();i++){
    Node* temp=new Node(arr[i]);  // 1 2 3 4 5
    mover->next=temp;
    mover=temp;
  }
  return head;
}
int COUNT(Node* head){
  Node* temp=head;
  int cnt=0;
  while(temp){
   cnt++;
    temp=temp->next;
  }
  return cnt;
}
void print(Node* head){
  Node* temp=head;
  while(temp){
    cout<<temp->data<<" ";
    temp=temp->next;
  }
}
Node* RemoveHead(Node* head){
  Node* temp=head;
  head=head->next;
  delete temp;
  return head;
}
Node* RemoveTail(Node* head){
  Node* temp=head;
  while(temp->next->next!=NULL){
      temp=temp->next;
  }
   delete temp->next;
  temp->next=nullptr;
 
  return head;
}
int main(){
vector<int> arr={4,2,4,6,2};
Node* head=ArraytoLL(arr);
head =RemoveTail(head);
print(head);
}



## Remove Kth Node

#include<bits/stdc++.h>
using namespace std;
struct Node{
  int data;
  Node* next;
  Node(int data1,Node* next1){
    data=data1;
    next=next1;
  }
  Node(int data1){
    data=data1;
    next=nullptr;
  }
};
Node* ArraytoLL(vector<int> arr){
  Node* head =new Node(arr[0]);
  Node* mover=head;
  for(int i=1;i<arr.size();i++){
    Node* temp=new Node(arr[i]);  // 1 2 3 4 5
    mover->next=temp;
    mover=temp;
  }
  return head;
}
int COUNT(Node* head){
  Node* temp=head;
  int cnt=0;
  while(temp){
   cnt++;
    temp=temp->next;
  }
  return cnt;
}
void print(Node* head){
  Node* temp=head;
  while(temp){
    cout<<temp->data<<" ";
    temp=temp->next;
  }
}
Node* RemoveKthNode(Node* head,int k){
  int cnt=0;
  if(head==NULL){
    return head;
  }
  if(k==1){
    Node* temp=head;
    head=head->next;
    delete temp;
    return head;
  }
  Node* prev=NULL;
  Node* temp=head;
  while(temp!=NULL){
    cnt++;
    if(cnt==k){
    prev->next=prev->next->next;
    delete temp;
      break;
    }
    prev=temp;
    temp=temp->next;
  }
  return head;
}
int main(){
vector<int> arr={4,2,4,6,2};
Node* head=ArraytoLL(arr);
head =RemoveKthNode(head,4);
print(head);
}


##Remove Element From Linkedlist

#include<bits/stdc++.h>
using namespace std;
struct Node{
  int data;
  Node* next;
  Node(int data1,Node* next1){
    data=data1;
    next=next1;
  }
  Node(int data1){
    data=data1;
    next=nullptr;
  }
};
Node* ArraytoLL(vector<int> arr){
  Node* head =new Node(arr[0]);
  Node* mover=head;
  for(int i=1;i<arr.size();i++){
    Node* temp=new Node(arr[i]);  // 1 2 3 4 5
    mover->next=temp;
    mover=temp;
  }
  return head;
}
int COUNT(Node* head){
  Node* temp=head;
  int cnt=0;
  while(temp){
   cnt++;
    temp=temp->next;
  }
  return cnt;
}
void print(Node* head){
  Node* temp=head;
  while(temp){
    cout<<temp->data<<" ";
    temp=temp->next;
  }
}
Node* RemoveElement(Node* head,int ele){
  int cnt=0;
  if(head==NULL){
    return head;
  }
  if(head->data==ele){
    Node* temp=head;
    head=head->next;
    delete temp;
    return head;
  }
  Node* prev=NULL;
  Node* temp=head;
  while(temp!=NULL){
   
    if(temp->data==ele){
    prev->next=prev->next->next;
    delete temp;
      break;
    }
    prev=temp;
    temp=temp->next;
  }
  return head;
}
int main(){
vector<int> arr={4,2,4,6,2};
Node* head=ArraytoLL(arr);
head =RemoveElement(head,4);
print(head);
}


#Insert Head in the LinkedList

#include<bits/stdc++.h>
using namespace std;
struct Node{
  int data;
  Node* next;
  Node(int data1,Node* next1){
    data=data1;
    next=next1;
  }
  Node(int data1){
    data=data1;
    next=nullptr;
  }
};
Node* ArraytoLL(vector<int> arr){
  Node* head =new Node(arr[0]);
  Node* mover=head;
  for(int i=1;i<arr.size();i++){
    Node* temp=new Node(arr[i]);  // 1 2 3 4 5
    mover->next=temp;
    mover=temp;
  }
  return head;
}

void print(Node* head){
  Node* temp=head;
  while(temp){
    cout<<temp->data<<" ";
    temp=temp->next;
  }
}
Node* InsertBegin(Node* head,int ele){
 Node* temp=new Node(ele,head);
  return temp;
}
int main(){
vector<int> arr={4,2,4,6,2};
Node* head=ArraytoLL(arr);
head =InsertBegin(head,100);
print(head);
}
